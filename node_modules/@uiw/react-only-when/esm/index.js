import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["style"];
import React from 'react';
import { If } from './If';
import { jsx as _jsx } from "react/jsx-runtime";
export * from './If';
export default function OnlyWhen(props) {
  var {
    children,
    when,
    hiddenMode = 'null',
    className = 'w-hidden'
  } = props;
  var singleChild = React.Children.only(children);
  var _singleChild$props = singleChild.props,
    {
      style
    } = _singleChild$props,
    restOfChildProps = _objectWithoutPropertiesLoose(_singleChild$props, _excluded);
  var extendedProps = _extends({}, restOfChildProps);
  var keepNode = hiddenMode && hiddenMode !== 'null';
  if (keepNode) {
    if (hiddenMode === 'css') {
      extendedProps.className = ((extendedProps.className || '') + " " + (className || '')).trim();
    } else {
      extendedProps.style = _extends({}, style, hiddenMode === 'display' && {
        display: 'none'
      }, hiddenMode === 'visibility' && {
        visibility: 'hidden'
      });
    }
  }
  var cloned = /*#__PURE__*/React.cloneElement(singleChild, extendedProps);
  var toHide = /*#__PURE__*/_jsx(If, {
    condition: keepNode,
    children: cloned
  });
  return when ? singleChild : toHide;
}